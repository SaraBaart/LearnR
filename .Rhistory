Terms
DF
cpglm.m1@contrasts
model.matrix(Terms, newdata = DF, contrasts.arg = cpglm.m1@contrasts)
Terms <- delete.response(tt)
X <- model.matrix(Terms, newdata = DF, contrasts.arg = cpglm.m1@contrasts)
Terms
X <- model.matrix(Terms,  contrasts.arg = cpglm.m1@contrasts)
model.matrix
##############################
## Step 4: Fit the Models   ##
##      HOESTDRANG          ##
#######################################
# Step 4C: Tweedie model  with cplm  ##
#######################################
library(cplm)
library(statmod)
cpglm.m1 <- cpglmm(HOESTDRANG ~ VAS_DAY +(VAS_DAY|Kenmerk),  data = VAS_data_6)
DF <- with(VAS_data_6, expand.grid(VAS_DAY = seq(0, 168, length.out = 30) ))
summary(cpglm.m1)
tt <- attr(cpglm.m1@model.frame,"terms")
Terms <- delete.response(tt)
?`predict,cpglmm-method`
`predict,cpglmm-method`
predict.cpglmm-method
predict,cpglmm-method
X <- model.matrix(cpglm.m1)
predictor <- as.numeric(X %*% beta)
X
mu <- as.vector(tweedie(link.power = cpglm.m1@link.power)$linkinv(predictor))
predict.cpglmm-method
X <- model.matrix(cpglm.m1)
X
beta <- object@fixef
beta <- cpglm.m1@fixef
beta
predictor <- as.numeric(X %*% beta)
predictor
mu <- as.vector(tweedie(link.power = cpglm.m1@link.power)$linkinv(predictor))
cpm.plotdata <- DF
cpm.plotdata$mu <- mu
mu
X
X <- cbind(rep(1, nrow(DF)), DF)
beta <- cpglm.m1@fixef
predictor <- as.numeric(X %*% beta)
beta
X
names(X)
names(beta)
names(X) <- names(beta)
predictor <- as.numeric(X %*% beta)
X <- model.matrix(cpglm.m1)
X <- as.matrix(rep(1, nrow(DF)), DF)
X <- as.matrix(cbind(rep(1, nrow(DF)), DF))
X
predictor <- as.numeric(X %*% beta)
predictor <- as.numeric(X %*% beta)
mu <- as.vector(tweedie(link.power = cpglm.m1@link.power)$linkinv(predictor))
predict.cpglmm-method
cpm.plotdata <- DF
cpm.plotdata$mu <- mu
# make the effect plot together with the data
p <-  ggplot(data = VAS_data_6) +
geom_point(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk)), shape = 20, size = 2) +
geom_line(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk))) +
geom_line(data = cpm.plotdata, aes(x = VAS_DAY, y = exp(mu)), colour = "black",  lwd = 2) +
#geom_ribbon(data = plot_data, aes(x = VAS_DAY, ymin = exp(low), ymax = exp(upp)), fill = "black", alpha = 0.15) +
theme_classic() +
theme(legend.position = "none")
p
predict(cpglm.m1)
DF
predict(cpglm.m1, newdata = DF)
DF$Kenmerk <- "new"
predict(cpglm.m1, newdata = DF, ngrps = 1)
predict(cpglm.m1, newdata = DF)
predict(cpglm.m1, newdata = DF, flist = Kenmerk)
predict(cpglm.m1, newdata = DF, flist = DF$Kenmerk)
predict(cpglm.m1, newdata = DF, flist = DF$Kenmerk, ngrps = 1)
VAS_data_6
VAS_data_6$Kenmerk
VAS_data_6$Kenmerk[1]
DF$Kenmerk <- VAS_data_6$Kenmerk[1]
predict(cpglm.m1, newdata = DF, flist = DF$Kenmerk, ngrps = 1)
cpm.plotdata <- DF
# make the effect plot together with the data
p <-  ggplot(data = VAS_data_6) +
geom_point(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk)), shape = 20, size = 2) +
geom_line(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk))) +
geom_line(data = cpm.plotdata, aes(x = VAS_DAY, y = exp(mu)), colour = "black",  lwd = 2) +
geom_line(data = cpm.plotdata, aes(x = VAS_DAY, y = exp(mu_predict)), colour = "red",  lwd = 2) +
#geom_ribbon(data = plot_data, aes(x = VAS_DAY, ymin = exp(low), ymax = exp(upp)), fill = "black", alpha = 0.15) +
theme_classic() +
theme(legend.position = "none")
p
cpm.plotdata$mu_predict <- predict(cpglm.m1, newdata = DF, flist = DF$Kenmerk, ngrps = 1)
# make the effect plot together with the data
p <-  ggplot(data = VAS_data_6) +
geom_point(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk)), shape = 20, size = 2) +
geom_line(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk))) +
geom_line(data = cpm.plotdata, aes(x = VAS_DAY, y = exp(mu)), colour = "black",  lwd = 2) +
geom_line(data = cpm.plotdata, aes(x = VAS_DAY, y = exp(mu_predict)), colour = "red",  lwd = 2) +
#geom_ribbon(data = plot_data, aes(x = VAS_DAY, ymin = exp(low), ymax = exp(upp)), fill = "black", alpha = 0.15) +
theme_classic() +
theme(legend.position = "none")
p
DF$Kenmerk <- VAS_data_6$Kenmerk[1614]
cpm.plotdata$mu_predict <- predict(cpglm.m1, newdata = DF, flist = DF$Kenmerk, ngrps = 1)
# make the effect plot together with the data
p <-  ggplot(data = VAS_data_6) +
geom_point(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk)), shape = 20, size = 2) +
geom_line(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk))) +
geom_line(data = cpm.plotdata, aes(x = VAS_DAY, y = exp(mu)), colour = "black",  lwd = 2) +
geom_line(data = cpm.plotdata, aes(x = VAS_DAY, y = exp(mu_predict)), colour = "red",  lwd = 2) +
#geom_ribbon(data = plot_data, aes(x = VAS_DAY, ymin = exp(low), ymax = exp(upp)), fill = "black", alpha = 0.15) +
theme_classic() +
theme(legend.position = "none")
p
cpglm.m1
vcov(cpglm.m1)
V <- vcov(cpglm.m1)
ses <- sqrt(diag(X %*% V %*% t(X)))
ses
cpm.plotdata <- DF
cpm.plotdata$mu <- mu
cpm.plotdata$LO <- cpm.plotdata$mu - 1.96 * ses
cpm.plotdata$HI <- cpm.plotdata$mu + 1.96 * ses
# make the effect plot together with the data
p <-  ggplot(data = VAS_data_6) +
geom_point(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk)), shape = 20, size = 2) +
geom_line(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk))) +
geom_line(data = cpm.plotdata, aes(x = VAS_DAY, y = exp(mu)), colour = "black",  lwd = 2) +
geom_line(data = cpm.plotdata, aes(x = VAS_DAY, y = exp(mu_predict)), colour = "red",  lwd = 2) +
geom_ribbon(data = cpm.plotdata, aes(x = VAS_DAY, ymin = exp(LO), ymax = exp(HI)), fill = "black", alpha = 0.15) +
theme_classic() +
theme(legend.position = "none")
p
# The package cplm has a predict function, but this allows only predictions on patient levels:
# I need to fill in the random effect so I can only obtain patient specific predictions.
# See if we can find a way to fix this.
DF$Kenmerk <- VAS_data_6$Kenmerk[1614]
cpm.plotdata$mu_predict <- predict(cpglm.m1, newdata = DF, flist = DF$Kenmerk, ngrps = 1)
# make the effect plot together with the data
p <-  ggplot(data = VAS_data_6) +
geom_point(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk)), shape = 20, size = 2) +
geom_line(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk))) +
geom_line(data = cpm.plotdata, aes(x = VAS_DAY, y = exp(mu)), colour = "black",  lwd = 2) +
geom_line(data = cpm.plotdata, aes(x = VAS_DAY, y = exp(mu_predict)), colour = "red",  lwd = 2) +
geom_ribbon(data = cpm.plotdata, aes(x = VAS_DAY, ymin = exp(LO), ymax = exp(HI)), fill = "black", alpha = 0.15) +
theme_classic() +
theme(legend.position = "none")
p
# make the effect plot together with the data
p <-  ggplot(data = VAS_data_6) +
geom_point(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk)), shape = 20, size = 2) +
geom_line(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk))) +
geom_line(data = cpm.plotdata, aes(x = VAS_DAY, y = exp(mu)), colour = "black",  lwd = 2) +
#geom_line(data = cpm.plotdata, aes(x = VAS_DAY, y = exp(mu_predict)), colour = "red",  lwd = 2) +
geom_ribbon(data = cpm.plotdata, aes(x = VAS_DAY, ymin = exp(LO), ymax = exp(HI)), fill = "black", alpha = 0.15) +
theme_classic() +
theme(legend.position = "none")
p
ggsave("Y:/Onderzoek/Hurdle & Tobit/R/Plots/Spaghetti-cpglmm.png")
summary(cpglm.m1)
fit_zipoisson <- glmmTMB(HOESTDRANG ~ VAS_DAY+(VAS_DAY|Kenmerk),
data=VAS_data_6,
ziformula=~VAS_DAY,
family=poisson)
library(glmmTMB)
y <- VAS_data_6$HOESTDRANG
cens <- rep(0, nrow(VAS_data_6))
X <- cbind(rep(1, nrow(VAS_data_6)), VAS_data_6$VAS_DAY)
Z <- cbind(rep(1, nrow(VAS_data_6)), VAS_data_6$VAS_DAY)
cluster <- as.numeric(as.factor(VAS_data_6$Kenmerk))
tobit.m <-  lmec(yL = y, cens = cens, X = X, Z = Z, cluster = cluster,
method = 'ML', maxstep = 40)
summary(tobit.m)
# Library lmec for TOBIT with repeated measures
library(lmec)
y <- VAS_data_6$HOESTDRANG
cens <- rep(0, nrow(VAS_data_6))
X <- cbind(rep(1, nrow(VAS_data_6)), VAS_data_6$VAS_DAY)
Z <- cbind(rep(1, nrow(VAS_data_6)), VAS_data_6$VAS_DAY)
cluster <- as.numeric(as.factor(VAS_data_6$Kenmerk))
tobit.m <-  lmec(yL = y, cens = cens, X = X, Z = Z, cluster = cluster,
method = 'ML', maxstep = 40)
summary(tobit.m)
tobit.m
DF <- with(VAS_data_6, expand.grid(VAS_DAY = seq(0, 168, length.out = 30) ))
# I can calculate the predicted values manually by multiplying
# the beta coefficients with values for DAYS and taking the exp() of these values
X <- as.matrix(cbind(rep(1, nrow(DF)), DF))
X
tobit.m
beta <- tobit.m$beta
V <- tobit.m$varFix
ses <- sqrt(diag(X %*% V %*% t(X)))
predictor <- as.numeric(X %*% beta)
tobit.plotdata <- DF
tobit.plotdata$mu <- mu
tobit.plotdata$pred <- pred
tobit.plotdata$pred <- predictor
tobit.plotdata <- DF
tobit.plotdata$pred <- predictor
tobit.plotdata$LO <- tobit.plotdata$pred - 1.96 * ses
tobit.plotdata$HI <- tobit.plotdata$pred + 1.96 * ses
# make the effect plot together with the data
p <-  ggplot(data = VAS_data_6) +
geom_point(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk)), shape = 20, size = 2) +
geom_line(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk))) +
geom_line(data = tobit.plotdata, aes(x = VAS_DAY, y = pred), colour = "black",  lwd = 2) +
geom_ribbon(data = tobit.plotdata, aes(x = VAS_DAY, ymin = LO, ymax = HI), fill = "black", alpha = 0.15) +
theme_classic() +
theme(legend.position = "none")
p
ggsave("Y:/Onderzoek/Hurdle & Tobit/R/Plots/Spaghetti-tobit.png")
beta
V
str(tobit.m)
fit_zipoisson <- glmmTMB(HOESTDRANG ~ VAS_DAY+(VAS_DAY|Kenmerk),
data=VAS_data_6,
ziformula=~VAS_DAY,
family=poisson)
?family.glmmTMB
?family_glmmTMB
fit_glmmTMBtweedie <- glmmTMB(HOESTDRANG ~ VAS_DAY+(VAS_DAY|Kenmerk),
data=VAS_data_6,
ziformula=~VAS_DAY,
family=tweedie(link = "log"))
summary(fit_glmmTMBtweedie)
DF <- with(VAS_data_6, expand.grid(VAS_DAY = seq(0, 168, length.out = 30) ))
DF$Kenmerk <- "new"
pred <- predict(fit_zipoisson, newdata = DF, allow.new.levels = T, se.fit = T)
DF$pred <- pred$fit
# Get the lower and upper confidence intervals
DF$LO <- pred$fit - 1.96 * pred$se.fit
DF$HI <- pred$fit + 1.96 * pred$se.fit
# make the effect plot together with the data
p <-  ggplot(data = VAS_data_6) +
geom_point(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk)), shape = 20, size = 2) +
geom_line(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk))) +
geom_line(data = DF, aes(x = VAS_DAY, y = exp(pred)), colour = "black",  lwd = 2) +
#geom_ribbon(data = DF, aes(x = VAS_DAY, ymin = exp(LO), ymax = exp(HI)), fill = "black", alpha = 0.15) +
theme_classic() +
theme(legend.position = "none")
p
# make the effect plot together with the data
p <-  ggplot(data = VAS_data_6) +
geom_point(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk)), shape = 20, size = 2) +
geom_line(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk))) +
geom_line(data = DF, aes(x = VAS_DAY, y = exp(pred)), colour = "black",  lwd = 2) +
geom_ribbon(data = DF, aes(x = VAS_DAY, ymin = exp(LO), ymax = exp(HI)), fill = "black", alpha = 0.15) +
theme_classic() +
theme(legend.position = "none")
p
pred <- predict(fit_glmmTMBtweedie, newdata = DF, allow.new.levels = T, se.fit = T)
DF$pred <- pred$fit
# Get the lower and upper confidence intervals
DF$LO <- pred$fit - 1.96 * pred$se.fit
DF$HI <- pred$fit + 1.96 * pred$se.fit
# make the effect plot together with the data
p <-  ggplot(data = VAS_data_6) +
geom_point(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk)), shape = 20, size = 2) +
geom_line(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk))) +
geom_line(data = DF, aes(x = VAS_DAY, y = exp(pred)), colour = "black",  lwd = 2) +
geom_ribbon(data = DF, aes(x = VAS_DAY, ymin = exp(LO), ymax = exp(HI)), fill = "black", alpha = 0.15) +
theme_classic() +
theme(legend.position = "none")
p
fit_glmmTMBtweedie
fit_glmmTMBtweedie <- glmmTMB(HOESTDRANG ~ VAS_DAY+(VAS_DAY|Kenmerk),
data=VAS_data_6,
family=tweedie(link = "log"))
summary(fit_glmmTMBtweedie)
DF <- with(VAS_data_6, expand.grid(VAS_DAY = seq(0, 168, length.out = 30) ))
DF$Kenmerk <- "new"
pred <- predict(fit_glmmTMBtweedie, newdata = DF, allow.new.levels = T, se.fit = T)
DF$pred <- pred$fit
# Get the lower and upper confidence intervals
DF$LO <- pred$fit - 1.96 * pred$se.fit
DF$HI <- pred$fit + 1.96 * pred$se.fit
# make the effect plot together with the data
p <-  ggplot(data = VAS_data_6) +
geom_point(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk)), shape = 20, size = 2) +
geom_line(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk))) +
geom_line(data = DF, aes(x = VAS_DAY, y = exp(pred)), colour = "black",  lwd = 2) +
geom_ribbon(data = DF, aes(x = VAS_DAY, ymin = exp(LO), ymax = exp(HI)), fill = "black", alpha = 0.15) +
theme_classic() +
theme(legend.position = "none")
p
DF <- with(VAS_data_6, expand.grid(VAS_DAY = seq(0, 168, length.out = 30) ))
DF$Kenmerk <- "new"
pred <- predict(fit_glmmTMBtweedie, newdata = DF, allow.new.levels = T, se.fit = T)
DF$pred <- pred$fit
# Get the lower and upper confidence intervals
DF$LO <- pred$fit - 1.96 * pred$se.fit
DF$HI <- pred$fit + 1.96 * pred$se.fit
# make the effect plot together with the data
p <-  ggplot(data = VAS_data_6) +
geom_point(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk)), shape = 20, size = 2) +
geom_line(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk))) +
geom_line(data = DF, aes(x = VAS_DAY, y = exp(pred)), colour = "black",  lwd = 2) +
#geom_ribbon(data = DF, aes(x = VAS_DAY, ymin = exp(LO), ymax = exp(HI)), fill = "black", alpha = 0.15) +
theme_classic() +
theme(legend.position = "none")
p
fit_glmmTMBtweedie <- glmmTMB(HOESTDRANG ~ VAS_DAY+(VAS_DAY|Kenmerk),
data = VAS_data_6,
family = tweedie())
summary(fit_glmmTMBtweedie)
DF <- with(VAS_data_6, expand.grid(VAS_DAY = seq(0, 168, length.out = 30) ))
DF$Kenmerk <- "new"
pred <- predict(fit_glmmTMBtweedie, newdata = DF, allow.new.levels = T, se.fit = T)
DF$pred <- pred$fit
# Get the lower and upper confidence intervals
DF$LO <- pred$fit - 1.96 * pred$se.fit
DF$HI <- pred$fit + 1.96 * pred$se.fit
# make the effect plot together with the data
p <-  ggplot(data = VAS_data_6) +
geom_point(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk)), shape = 20, size = 2) +
geom_line(aes(x = VAS_DAY, y = jitter(HOESTDRANG), colour = as.factor(Kenmerk))) +
geom_line(data = DF, aes(x = VAS_DAY, y = exp(pred)), colour = "black",  lwd = 2) +
#geom_ribbon(data = DF, aes(x = VAS_DAY, ymin = exp(LO), ymax = exp(HI)), fill = "black", alpha = 0.15) +
theme_classic() +
theme(legend.position = "none")
p
knitr::opts_chunk$set(echo = TRUE)
class(v)
warnings()
library(readxl)
library(lme4)
library(GLMMadaptive)
library(ggplot2)
library(dplyr)
VAS_data <- read_excel("Y:/Long/Gizal Nakshbandi/VAS_Totaal_final.xls")
# Bereken hoeveel patienten er in de data zitten voor een longitudinale data set
sapply(VAS_data, function(x) length(unique(VAS_data$Kenmerk)))
# Use only the first half year (DAY < 169)
VAS_data_6 <- VAS_data %>% filter(VAS_DAY < 169)
summary(VAS_data_6$VAS_DAY)
p <-  ggplot(data = VAS_data_6) +
geom_point(aes(x = VAS_DAY, y = HOESTDRANG, colour = as.factor(Kenmerk)), shape = 20, size = 2) +
geom_line(aes(x = VAS_DAY, y = HOESTDRANG, colour = as.factor(Kenmerk))) +
theme_classic() +
theme(legend.position = "none")
p
# Library lmec for TOBIT with repeated measures
library(lmec)
y <- VAS_data_6$HOESTDRANG
cens <- rep(0, nrow(VAS_data_6))
X <- cbind(rep(1, nrow(VAS_data_6)), VAS_data_6$VAS_DAY)
Z <- cbind(rep(1, nrow(VAS_data_6)), VAS_data_6$VAS_DAY)
cluster <- as.numeric(as.factor(VAS_data_6$Kenmerk))
tobit.m <-  lmec(yL = y, cens = cens, X = X, Z = Z, cluster = cluster,
method = 'ML', maxstep = 40)
summary(tobit.m)
tobit.m$bi
summary(tobit.m)
tobit.m$Psi
# Cannot find repeated measures yet
library(VGAM)
tobit.m <- vglm(HOESTDRANG ~ VAS_DAY , tobit(Lower = 0, Upper = 10),  data = VAS_Totaal_final)
View(VAS_data_6)
tobit.m <- vglm(HOESTDRANG ~ VAS_DAY , tobit(Lower = 0, Upper = 10),  data = VAS_data_6)
summary(tobit.m)
tobit.m$beta
summary(tobit.m)
tobit.m1 <- vglm(HOESTDRANG ~ VAS_DAY , tobit(Lower = 0, Upper = 10),  data = VAS_data_6)
y <- VAS_data_6$HOESTDRANG
cens <- rep(0, nrow(VAS_data_6))
X <- cbind(rep(1, nrow(VAS_data_6)), VAS_data_6$VAS_DAY)
Z <- cbind(rep(1, nrow(VAS_data_6)), VAS_data_6$VAS_DAY)
cluster <- as.numeric(as.factor(VAS_data_6$Kenmerk))
tobit.m <-  lmec(yL = y, cens = cens, X = X, Z = Z, cluster = cluster,
method = 'ML', maxstep = 40)
summary(tobit.m1)
tobit.m$beta
knitr::opts_chunk$set(echo = TRUE)
2 + 4
x <- 2 + 4
x
v <- c(1,2,3,4)
v
class(v)
v2 <- c("Monday", "Tuesday", "Wednesday", "Friday")
v2
class(v2)
v3 <- c(v,v2)
v3
class(v3)
m1 <- matrix(c(1:9), nrow = 3)
m1
class(m1)
m2 <- matrix(c(1:9), nrow = 3, byrow = TRUE)
m2
data2 <- as.data.frame(m2)
data2
class(data2)
data3 <- as.data.frame(cbind(v, v2))
data3
mtcars[1,]
mtcars[,2]
id <- 1:10
group <- c(rep(1,5), rep(2,5))
M_1 <- round(rnorm(10, mean = 20, sd = 5),1)
M_2 <- round(rnorm(10, mean = 22, sd = 5),1)
M_3 <- round(rnorm(10, mean = 24, sd = 5),1)
M_4 <- round(rnorm(10, mean = 26, sd = 5),1)
data_wide <- as.data.frame(cbind(id, group, M_1, M_2, M_3, M_4))
head(data_wide)
library(data.table)
data_long <- melt(setDT(data_wide), id = c('id', 'group'),
measure = patterns("M"),
value.name = c('M'), variable.name = "Time")
levels(data_long$Time) <-  c(1, 2, 3, 4)
data_long <- data_long[order(data_long$id),]
head(data_long)
p1 <- as.data.frame(cbind(c(0, 1, 2, 3, 4, 5),
c(6, 5.3, 4.4, 3.2, 3.5, 3),
c(8.4, 9.1, 9.7, 11.3, 13.5, 15)))
plot(p1$V1, p1$V2, ylim =c(1, 16), pch =19, ylab = ("Longtidunal Outcome"), xlab = "Time")
points(p1$V1, p1$V3)
segments(0, 6,5,2, lty = 2)
segments(0, 8,5,14.5, lty = 2)
segments(0, 7,5,9, lty = 1, lwd = 2)
legend("topleft", legend = c("Subject 1", "Subject 2"), pch = c(19, 1), bty = "n", cex = 0.8 )
library(lme4)
fm2 <- lmer(distance ~ age*Sex + (age | Subject), data = Orthodont)
library(lme4)
library(nlme)
data(Orthodont)
head(Orthodont)
dim(Orthodont)
fm1 <- lmer(distance ~ age*Sex + (1 | Subject), data = Orthodont)
summary(fm1)
fm2 <- lmer(distance ~ age*Sex + (age | Subject), data = Orthodont)
anova(fm1, fm2)
newdat <- expand.grid(age = c(8,10,12,14),
Sex = c("Male", "Female"))
pred <- as.data.frame(predictSE(fm1, newdata = newdat, se.fit = TRUE, level = 0,
print.matrix = T))
library(AICcmodavg)
library(AICcmodavg)
pred <- as.data.frame(predictSE(fm1, newdata = newdat, se.fit = TRUE, level = 0,
print.matrix = T))
newdat$pred <- pred$fit
# Get the lower and upper confidence intervals
newdat$LO <- pred$fit - 1.96 * pred$se.fit
newdat$HI <- pred$fit + 1.96 * pred$se.fit
newdat$se <- pred$se.fit
head(newdat)
p <- ggplot(data = Orthodont) +
geom_point(aes(x = age, y = distance, group = Subject, colour = Sex)) +
geom_line(aes(x = age, y = distance, group = Subject, colour = Sex)) +
geom_line(data = newdat, aes(x = age, y = pred, colour = Sex),  lwd = 2) +
geom_ribbon(data = newdat, aes(x = age, ymin = LO, ymax = HI, fill = Sex),  alpha = 0.25) +
theme_classic() +
theme(legend.position = "none")
p
library(ggplot2)
p <- ggplot(data = Orthodont) +
geom_point(aes(x = age, y = distance, group = Subject, colour = Sex)) +
geom_line(aes(x = age, y = distance, group = Subject, colour = Sex)) +
geom_line(data = newdat, aes(x = age, y = pred, colour = Sex),  lwd = 2) +
geom_ribbon(data = newdat, aes(x = age, ymin = LO, ymax = HI, fill = Sex),  alpha = 0.25) +
theme_classic() +
theme(legend.position = "none")
p
p <- ggplot(data = Orthodont) +
geom_point(aes(x = age, y = distance, group = Subject, colour = Sex)) +
geom_line(aes(x = age, y = distance, group = Subject, colour = Sex)) +
geom_line(data = newdat, aes(x = age, y = pred, colour = Sex),  lwd = 2) +
geom_ribbon(data = newdat, aes(x = age, ymin = LO, ymax = HI, fill = Sex),  alpha = 0.25) +
theme_classic()
p
library(lmerTest)
summary(fm1)
summary(fm1)
library(lmerTest)
summary(fm1)
# With lmerTest you get p-values with summary
library(lmerTest)
# Fit the linear mixed model - random intercepts
fm1 <- lmer(distance ~ age*Sex + (1 | Subject), data = Orthodont)
summary(fm1)
## Calculate the differences on specific time points
# Use library emmeans
library(emmeans)
# Whether the differences in Sex are significant at age 8 and 10
emmeans(fm1, specs = pairwise ~ Sex | age, at = list(age = c(8, 10)))
emmeans(fm1, specs = pairwise ~  Sex)
emmeans(fm1, specs = pairwise ~  Sex | age)
newdat
emmeans(fm1, specs = pairwise ~  Sex | age, at = list(age = c(8, 10, 12, 14)))
emmeans(fm1, specs = pairwise ~  Sex | age, at = list(age = c(8, 10, 12, 14)))$emmeans
emmeans(fm1, specs = pairwise ~  Sex | age, at = list(age = c(8, 10, 12, 14)))$contrasts
emmeans(fm1, specs = pairwise ~  age, at = list(age = c(8, 10, 12, 14)))$contrasts
emmeans(fm1, specs = pairwise ~  age| Sex, at = list(age = c(8, 10)))$contrasts
emmeans(fm1, specs = pairwise ~  age , at = list(age = c(8, 10)))$contrasts
emmeans(fm1, specs = pairwise ~  age , at = list(age = c(8, 10)))$emmeans
# Whether the differences in Sex are significant at age 8 and 10
emmeans(fm1, specs = pairwise ~ Sex | age, at = list(age = c(8, 10)))
emmeans(fm1, specs = pairwise ~  Sex | age, at = list(age = c(8, 10, 12, 14)))$contrasts
emmeans(fm1, specs = pairwise ~  Sex | age, at = age = 10))$emmeans
emmeans(fm1, specs = pairwise ~  Sex | age, at = (age = 10))$emmeans
emmeans(fm1, specs = pairwise ~  Sex | age, at = c(age = 10))$emmeans
emmeans(fm1, specs = pairwise ~  age |Sex , at = list(age = c(8, 10)))$contrasts
emmeans(fm1, specs = pairwise ~  age |Sex , at = list(age = c(12, 14)))$contrasts
emmeans(fm1, specs = pairwise ~  age , at = list(age = c(12, 14)))$contrasts
emmeans(fm1, specs = pairwise ~  age | Sex, at = list(age = c(12, 14)))$contrasts
emmeans(fm1, specs = pairwise ~  age | Sex, at = list(age = c(8, 14)))$emmeans
